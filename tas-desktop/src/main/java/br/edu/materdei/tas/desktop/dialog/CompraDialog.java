package br.edu.materdei.tas.desktop.dialog;

import br.edu.materdei.tas.desktop.MainFrame;
import br.edu.materdei.tas.desktop.exception.NotValidateException;
import br.edu.materdei.tas.desktop.gui.core.DataDocument;
import br.edu.materdei.tas.desktop.gui.core.TasDialogError;
import br.edu.materdei.tas.desktop.service.BackendService;
import java.awt.Component;
import java.awt.Cursor;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.DefaultListCellRenderer;
import javax.swing.ImageIcon;
import javax.swing.JList;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import net.sf.json.JSONObject;


public class CompraDialog extends GenericDialogImpl {
    private JSONObject compra;    
    private Object[] fornecs;
    
    /**
     * Creates new form TasDialogConfirm
     * @param parent
     * @param compra
     */
    public CompraDialog(java.awt.Frame parent, JSONObject compra) {
        super(parent, true);
        
        this.mainframe = (MainFrame) parent;
        this.fieldsEmpty = new ArrayList<>();
        
        initComponents();
        
        tfData.setDocument(new DataDocument());
        
        //Carrega os fornecedores
        loadFornecedores();
        
        //Faz com que seja mostrado no componente o atributo nome
        cbFornecedor.setRenderer( new DefaultListCellRenderer(){

            @Override  
            public Component getListCellRendererComponent(JList list, Object value, int index,
                    boolean isSelected, boolean cellHasFocus) {
            super.getListCellRendererComponent(list, value, index,
                isSelected, cellHasFocus);

                if ((value != null)&&(value instanceof JSONObject)) {
                    JSONObject provedor = (JSONObject) value;
                    setText( provedor.getString("nome"));
                }
                return this;
            }
        });
        
        preparaGrid();
        
        setCompra(compra);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        container = new javax.swing.JPanel();
        barraTitulo = new javax.swing.JPanel();
        divTop = new javax.swing.JPanel();
        plLeft = new javax.swing.JPanel();
        plRight = new javax.swing.JPanel();
        divBottom = new javax.swing.JPanel();
        container1 = new javax.swing.JPanel();
        close = new br.edu.materdei.tas.desktop.gui.titlebar.TasCloseButton();
        titulo = new javax.swing.JLabel();
        content = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        plCabecalho = new javax.swing.JPanel();
        tfCodigo = new javax.swing.JTextField();
        tfData = new javax.swing.JTextField();
        cbFornecedor = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        plProdutos = new javax.swing.JPanel();
        plEsq = new javax.swing.JPanel();
        btAddRegistro = new javax.swing.JButton();
        btDelRegistro = new javax.swing.JButton();
        scroll = new javax.swing.JScrollPane();
        grid = new javax.swing.JTable();
        plDir = new javax.swing.JPanel();
        plBottom = new javax.swing.JPanel();
        botoes = new javax.swing.JPanel();
        cancelar = new br.edu.materdei.tas.desktop.gui.core.TasDialogButton();
        salvar = new br.edu.materdei.tas.desktop.gui.core.TasDialogButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);

        container.setBackground(new java.awt.Color(246, 246, 246));
        container.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(188, 64, 34)));
        container.setMaximumSize(new java.awt.Dimension(650, 450));
        container.setMinimumSize(new java.awt.Dimension(650, 450));
        container.setPreferredSize(new java.awt.Dimension(650, 450));
        container.setLayout(new java.awt.BorderLayout());

        barraTitulo.setOpaque(false);
        barraTitulo.setPreferredSize(new java.awt.Dimension(348, 34));
        barraTitulo.setLayout(new java.awt.BorderLayout());

        divTop.setOpaque(false);
        divTop.setPreferredSize(new java.awt.Dimension(10, 7));

        javax.swing.GroupLayout divTopLayout = new javax.swing.GroupLayout(divTop);
        divTop.setLayout(divTopLayout);
        divTopLayout.setHorizontalGroup(
            divTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 648, Short.MAX_VALUE)
        );
        divTopLayout.setVerticalGroup(
            divTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 7, Short.MAX_VALUE)
        );

        barraTitulo.add(divTop, java.awt.BorderLayout.NORTH);

        plLeft.setOpaque(false);
        plLeft.setPreferredSize(new java.awt.Dimension(5, 10));

        javax.swing.GroupLayout plLeftLayout = new javax.swing.GroupLayout(plLeft);
        plLeft.setLayout(plLeftLayout);
        plLeftLayout.setHorizontalGroup(
            plLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );
        plLeftLayout.setVerticalGroup(
            plLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 21, Short.MAX_VALUE)
        );

        barraTitulo.add(plLeft, java.awt.BorderLayout.WEST);

        plRight.setOpaque(false);
        plRight.setPreferredSize(new java.awt.Dimension(5, 10));

        javax.swing.GroupLayout plRightLayout = new javax.swing.GroupLayout(plRight);
        plRight.setLayout(plRightLayout);
        plRightLayout.setHorizontalGroup(
            plRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );
        plRightLayout.setVerticalGroup(
            plRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 21, Short.MAX_VALUE)
        );

        barraTitulo.add(plRight, java.awt.BorderLayout.EAST);

        divBottom.setOpaque(false);
        divBottom.setPreferredSize(new java.awt.Dimension(10, 6));

        javax.swing.GroupLayout divBottomLayout = new javax.swing.GroupLayout(divBottom);
        divBottom.setLayout(divBottomLayout);
        divBottomLayout.setHorizontalGroup(
            divBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 648, Short.MAX_VALUE)
        );
        divBottomLayout.setVerticalGroup(
            divBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 6, Short.MAX_VALUE)
        );

        barraTitulo.add(divBottom, java.awt.BorderLayout.SOUTH);

        container1.setOpaque(false);
        container1.setPreferredSize(new java.awt.Dimension(277, 21));
        container1.setLayout(new java.awt.BorderLayout());

        close.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                closeMousePressed(evt);
            }
        });
        container1.add(close, java.awt.BorderLayout.EAST);

        titulo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        titulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titulo.setText("Cadastro de Compra");
        container1.add(titulo, java.awt.BorderLayout.CENTER);

        barraTitulo.add(container1, java.awt.BorderLayout.CENTER);

        container.add(barraTitulo, java.awt.BorderLayout.NORTH);

        content.setOpaque(false);

        jPanel1.setOpaque(false);
        jPanel1.setLayout(new java.awt.BorderLayout());

        plCabecalho.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Dados de Cabeçalho", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Light", 0, 12))); // NOI18N
        plCabecalho.setOpaque(false);
        plCabecalho.setPreferredSize(new java.awt.Dimension(612, 120));

        tfCodigo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        tfData.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        cbFornecedor.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        cbFornecedor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel1.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        jLabel1.setText("Código");

        jLabel2.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        jLabel2.setText("Fornecedor");

        jLabel3.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        jLabel3.setText("Data Compra");

        javax.swing.GroupLayout plCabecalhoLayout = new javax.swing.GroupLayout(plCabecalho);
        plCabecalho.setLayout(plCabecalhoLayout);
        plCabecalhoLayout.setHorizontalGroup(
            plCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(plCabecalhoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(plCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(plCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(plCabecalhoLayout.createSequentialGroup()
                        .addComponent(tfCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 252, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tfData, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cbFornecedor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        plCabecalhoLayout.setVerticalGroup(
            plCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(plCabecalhoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(plCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(plCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tfData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3))
                    .addGroup(plCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tfCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(plCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jPanel1.add(plCabecalho, java.awt.BorderLayout.NORTH);

        plProdutos.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Dados dos Produtos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Light", 0, 12))); // NOI18N
        plProdutos.setOpaque(false);
        plProdutos.setLayout(new java.awt.BorderLayout());

        plEsq.setOpaque(false);
        plEsq.setPreferredSize(new java.awt.Dimension(40, 28));

        btAddRegistro.setToolTipText("Adicionar Item");
        btAddRegistro.setMaximumSize(new java.awt.Dimension(28, 25));
        btAddRegistro.setMinimumSize(new java.awt.Dimension(28, 25));
        btAddRegistro.setPreferredSize(new java.awt.Dimension(28, 25));
        btAddRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddRegistroActionPerformed(evt);
            }
        });
        plEsq.add(btAddRegistro);

        btDelRegistro.setToolTipText("Remover Item");
        btDelRegistro.setMaximumSize(new java.awt.Dimension(28, 25));
        btDelRegistro.setMinimumSize(new java.awt.Dimension(28, 25));
        btDelRegistro.setPreferredSize(new java.awt.Dimension(28, 25));
        btDelRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDelRegistroActionPerformed(evt);
            }
        });
        plEsq.add(btDelRegistro);

        plProdutos.add(plEsq, java.awt.BorderLayout.WEST);

        grid.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        grid.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Descrição Produto", "Vlr Unit.", "Qtdade.", "Total", "#"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        grid.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        grid.setRowHeight(22);
        grid.getTableHeader().setResizingAllowed(false);
        grid.getTableHeader().setReorderingAllowed(false);
        scroll.setViewportView(grid);

        plProdutos.add(scroll, java.awt.BorderLayout.CENTER);

        plDir.setOpaque(false);
        plDir.setPreferredSize(new java.awt.Dimension(5, 5));

        javax.swing.GroupLayout plDirLayout = new javax.swing.GroupLayout(plDir);
        plDir.setLayout(plDirLayout);
        plDirLayout.setHorizontalGroup(
            plDirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );
        plDirLayout.setVerticalGroup(
            plDirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 192, Short.MAX_VALUE)
        );

        plProdutos.add(plDir, java.awt.BorderLayout.EAST);

        plBottom.setOpaque(false);
        plBottom.setPreferredSize(new java.awt.Dimension(600, 5));

        javax.swing.GroupLayout plBottomLayout = new javax.swing.GroupLayout(plBottom);
        plBottom.setLayout(plBottomLayout);
        plBottomLayout.setHorizontalGroup(
            plBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 616, Short.MAX_VALUE)
        );
        plBottomLayout.setVerticalGroup(
            plBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );

        plProdutos.add(plBottom, java.awt.BorderLayout.SOUTH);

        jPanel1.add(plProdutos, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout contentLayout = new javax.swing.GroupLayout(content);
        content.setLayout(contentLayout);
        contentLayout.setHorizontalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        contentLayout.setVerticalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)
                .addContainerGap())
        );

        container.add(content, java.awt.BorderLayout.CENTER);

        botoes.setOpaque(false);
        botoes.setPreferredSize(new java.awt.Dimension(10, 50));
        botoes.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.TRAILING, 10, 10));

        cancelar.setButtonType(br.edu.materdei.tas.desktop.gui.core.TasDialogButton.DialogButtonType.DANGER_BUTTON);
        cancelar.setLabel("Cancelar");
        cancelar.setPreferredSize(new java.awt.Dimension(75, 30));
        cancelar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                cancelarMousePressed(evt);
            }
        });
        botoes.add(cancelar);

        salvar.setButtonType(br.edu.materdei.tas.desktop.gui.core.TasDialogButton.DialogButtonType.SUCCESS_BUTTON);
        salvar.setLabel("Salvar");
        salvar.setPreferredSize(new java.awt.Dimension(75, 30));
        salvar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                salvarMousePressed(evt);
            }
        });
        botoes.add(salvar);

        container.add(botoes, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(container, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelarMousePressed
        dispose();
    }//GEN-LAST:event_cancelarMousePressed

    private void salvarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_salvarMousePressed
        try {
            validarDados();
            salvar();
        } catch (NotValidateException e) {
            TasDialogError dlgWarning = new TasDialogError(mainframe);
            dlgWarning.showError(TasDialogError.WARNING_ERROR, 
                                 "Preenchimento obrigatório", 
                                 e.getMessage(), 
                                 this.fieldsEmpty);
        }
    }//GEN-LAST:event_salvarMousePressed

    private void closeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeMousePressed
        dispose();
    }//GEN-LAST:event_closeMousePressed

    private void btAddRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddRegistroActionPerformed
        adicionarItem();
    }//GEN-LAST:event_btAddRegistroActionPerformed

    private void btDelRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDelRegistroActionPerformed
        removerItem();
    }//GEN-LAST:event_btDelRegistroActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel barraTitulo;
    private javax.swing.JPanel botoes;
    private javax.swing.JButton btAddRegistro;
    private javax.swing.JButton btDelRegistro;
    private br.edu.materdei.tas.desktop.gui.core.TasDialogButton cancelar;
    private javax.swing.JComboBox cbFornecedor;
    private br.edu.materdei.tas.desktop.gui.titlebar.TasCloseButton close;
    private javax.swing.JPanel container;
    private javax.swing.JPanel container1;
    private javax.swing.JPanel content;
    private javax.swing.JPanel divBottom;
    private javax.swing.JPanel divTop;
    private javax.swing.JTable grid;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel plBottom;
    private javax.swing.JPanel plCabecalho;
    private javax.swing.JPanel plDir;
    private javax.swing.JPanel plEsq;
    private javax.swing.JPanel plLeft;
    private javax.swing.JPanel plProdutos;
    private javax.swing.JPanel plRight;
    private br.edu.materdei.tas.desktop.gui.core.TasDialogButton salvar;
    private javax.swing.JScrollPane scroll;
    private javax.swing.JTextField tfCodigo;
    private javax.swing.JTextField tfData;
    private javax.swing.JLabel titulo;
    // End of variables declaration//GEN-END:variables



    private void loadFornecedores() {
        this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
        try {
            this.mainframe.setStatus("Carregando produtos. Aguarde...");
           
            try {
                this.fornecs = BackendService.findAll("fornecedores");
                
                cbFornecedor.removeAllItems();
                cbFornecedor.addItem(null);
                for (Object object : this.fornecs) {
                    JSONObject f = (JSONObject) object;
                    cbFornecedor.addItem(f);
                }
                
                this.mainframe.setStatus("Pronto!");
            } catch (Exception e) {
                this.fail = true;
                
                TasDialogError dlgError = new TasDialogError(mainframe);
                dlgError.showError(TasDialogError.DANGER_ERROR, 
                                   "<html>Não foi possível carregar os Fornecedores. Clique em \"Detalhes\" Para visualizar o problema.</html>", 
                                   e.getMessage());
                this.mainframe.setStatus(new ImageIcon(getClass().getResource("/assets/system/icons/icon-warning-small.png")), 
                                             e.getMessage(), "Ops!");
                dispose();
            }
           
        } finally {
            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }
    }
    
    private void preparaGrid() {
        btAddRegistro.setIcon(new ImageIcon(getClass().getResource("/assets/table/icon-record-add.png")));
        btDelRegistro.setIcon(new ImageIcon(getClass().getResource("/assets/table/icon-record-del.png")));        
        
        //Define largura das colunas
        grid.getColumnModel().getColumn(0).setPreferredWidth(70);
        grid.getColumnModel().getColumn(1).setPreferredWidth(220);
        grid.getColumnModel().getColumn(2).setPreferredWidth(100);
        grid.getColumnModel().getColumn(3).setPreferredWidth(50);
        grid.getColumnModel().getColumn(4).setPreferredWidth(100);
        
        //Coluna oculta para ter o ID do produto
        grid.getColumnModel().getColumn(5).setPreferredWidth(50);
        grid.getColumnModel().getColumn(5).setMaxWidth(0);  
        grid.getColumnModel().getColumn(5).setMinWidth(0);  
        grid.getTableHeader().getColumnModel().getColumn(5).setMaxWidth(0);  
        grid.getTableHeader().getColumnModel().getColumn(5).setMinWidth(0);  
        
        //Centralizar coluna Qtdade.
        DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer(); 
        centralizado.setHorizontalAlignment(SwingConstants.CENTER); 
        grid.getColumnModel().getColumn(3).setCellRenderer(centralizado);
    }
    
    private void setCompra(JSONObject compra) {
        this.compra = compra;
        
        tfCodigo.setText(compra.getString("codigo"));
        tfData.setText(compra.getString("dtcompra"));
        cbFornecedor.getModel().setSelectedItem(compra.get("fornecedor"));        
        
        this.compra.put("itens", new JSONObject());
    }

    @Override
    public void salvar() {
        this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
        try {
            this.mainframe.setStatus("Salvando registro. Aguarde...");
           
            try {
                //Codigo
                compra.put("codigo", tfCodigo.getText());
                
                //Data
                Date dtcompra = new SimpleDateFormat("dd/MM/yyyy").parse(tfData.getText());
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                compra.put("dtcompra", sdf.format(dtcompra));
                
                //Fornecedor
                JSONObject fornece = (JSONObject) cbFornecedor.getModel().getSelectedItem();
                compra.put("fornecedor", fornece);
                
                //Itens
                ArrayList<JSONObject> itens = new ArrayList<JSONObject>();
                for (int i = 0; i < this.grid.getRowCount(); i++) {
                    
                    JSONObject item = new JSONObject();
                    
                    //Valor Unit.
                    String aux = this.grid.getValueAt(i, 2).toString();
                    aux = aux.substring(3, aux.length());
                    aux = aux.replace(".", "");
                    Double vlrunit = Double.valueOf(aux.replace(",", "."));
                    item.put("vlrunit", vlrunit);
                    item.put("qtdade", this.grid.getValueAt(i, 3));
                    
                    JSONObject produto = new JSONObject();
                    produto.put("id", this.grid.getValueAt(i, 5));
                    item.put("produto", produto);
                    
                    itens.add(item);
                }
                compra.put("itens", itens);
                
                BackendService.save("compras", this.compra);               
                this.mainframe.setStatus("Pronto!");
            } catch (Exception e) {
                this.fail = true;
                
                TasDialogError dlgError = new TasDialogError(mainframe);
                dlgError.showError(TasDialogError.DANGER_ERROR, 
                                   "<html>Não foi possível salvar o registro. Clique em \"Detalhes\" Para visualizar o problema.</html>", 
                                   e.getMessage());
                this.mainframe.setStatus(new ImageIcon(getClass().getResource("/assets/system/icons/icon-warning-small.png")), 
                                             e.getMessage(), "Ops!");
                
            }
           
        } finally {
            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            dispose();
        }
    }

    @Override
    public void validarDados() throws NotValidateException {
        this.fieldsEmpty = new ArrayList<>();
        
        if (tfCodigo.getText().equals("")) {
            this.fieldsEmpty.add("O campo \"Código\" deve ser preenchido.");
        }
        //Verifica se a data é válida
        SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
        format.setLenient (false);
        try {
            format.parse(tfData.getText()); 
            
        } catch (ParseException e) {
            this.fieldsEmpty.add("A data informada é inválida! Corrija e tente novamente.");
        }
        if (cbFornecedor.getModel().getSelectedItem() == null) {
            this.fieldsEmpty.add("O campo \"Fornecedor\" deve ser preenchido.");
        }
        if (grid.getRowCount() == 0) {
            this.fieldsEmpty.add("É preciso adicionar produtos à compra.");
        }
        
        //Verifica se ocorreu erro
        if (this.fieldsEmpty.size() > 0)
            throw new NotValidateException("<html>Alguns campos obrigatórios não foram preenchidos! Corrija e tente novamente.</html>");
    }

    private void adicionarItem() {
        getRootPane().getGlassPane().setVisible(true);
        
        ItemCompraDialog dialog = new ItemCompraDialog(mainframe);
        
        dialog.dispose();
        dialog.setLocationRelativeTo(this);
        dialog.setUndecorated(true);
        dialog.setVisible(true);
        
        addItemGrid(dialog.getItem());
        
        getRootPane().getGlassPane().setVisible(false);
    }

    private void removerItem() {        
        DefaultTableModel modelo = (DefaultTableModel) grid.getModel();
        modelo.removeRow(grid.getSelectedRow());                    
        grid.setModel(modelo);
    }

    private void addItemGrid(JSONObject item) {
        if (item != null) {
            DefaultTableModel modelo = (DefaultTableModel) grid.getModel();
            String valunt = NumberFormat.getCurrencyInstance().format(item.getDouble("vlrunit"));
            Double valtot = (item.getDouble("vlrunit") * item.getDouble("qtdade"));
            String valtotal = NumberFormat.getCurrencyInstance().format(valtot);
            
            JSONObject produto = (JSONObject) item.get("produto");
            modelo.addRow(new Object[] {produto.get("codigo"), produto.get("nome"),
                                        valunt, item.getDouble("qtdade"), valtotal,
                                        produto.get("id")});
            
            grid.setModel(modelo);
        }
    }
}