
package br.edu.materdei.tas.desktop.view;

import br.edu.materdei.tas.desktop.dialog.GenericDialogImpl;
import br.edu.materdei.tas.desktop.dialog.PedidoVendaDialog;
import br.edu.materdei.tas.desktop.gui.core.TasDialogError;
import br.edu.materdei.tas.desktop.gui.core.TasItemToolBar;
import br.edu.materdei.tas.desktop.gui.renderer.AtivoTableCellRenderer;
import br.edu.materdei.tas.desktop.service.BackendService;

import java.awt.Cursor;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import net.sf.json.JSONArray;
import net.sf.json.JSONNull;
import net.sf.json.JSONObject;


public class PedidoVendaView extends GenericView {
    private Object[] pedidos;
    private Object[] vendas;
    private boolean showPedido;
    
  
    public PedidoVendaView() {
        initComponents();
        
        //Imagens da Toolbar
        toolbar.setImage(new ImageIcon(getClass().getResource("/assets/toolbar/fundoToolbar.png")).getImage());
        btPedido.setIcon(new ImageIcon(getClass().getResource("/assets/toolbar/pedidovenda.png")));
        btVenda.setIcon(new ImageIcon(getClass().getResource("/assets/toolbar/venda.png")));
        btIncluir.setIcon(new ImageIcon(getClass().getResource("/assets/toolbar/incluir.png")));        
        btExcluir.setIcon(new ImageIcon(getClass().getResource("/assets/toolbar/excluir.png")));
        btAddVenda.setIcon(new ImageIcon(getClass().getResource("/assets/toolbar/addvenda.png")));
        
        lbEmAberto.setIcon(new ImageIcon(getClass().getResource("/assets/system/icons/icon-ativo.png")));
        lbFaturado.setIcon(new ImageIcon(getClass().getResource("/assets/system/icons/icon-inativo.png")));
        
        ListSelectionModel cellSelectionModel = grid.getSelectionModel();
        cellSelectionModel.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                boolean selecionado = false;
                
                if (grid.getSelectedRow() >= 0) {
                    if (showPedido) {
                        JSONObject selected = (JSONObject) pedidos[grid.getSelectedRow()];
                        selecionado = (selected.get("dtfaturado") instanceof JSONNull);

                        btEditar.setEnabled(selecionado);
                        btAddVenda.setEnabled(selecionado);
                    } else {
                        selecionado = grid.getSelectedRow() >= 0;
                    }

                    btEditar.setEnabled(selecionado);
                    btExcluir.setEnabled(selecionado);
                }
            }
        });
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolbar = new br.edu.materdei.tas.desktop.gui.core.TasImagePanel();
        acaoPedido = new javax.swing.JPanel();
        tbPedido = new javax.swing.JPanel();
        btPedido = new br.edu.materdei.tas.desktop.gui.core.TasItemToolBar();
        tasSeparadorItem2 = new br.edu.materdei.tas.desktop.gui.core.TasSeparadorItem();
        btVenda = new br.edu.materdei.tas.desktop.gui.core.TasItemToolBar();
        divRight1 = new javax.swing.JPanel();
        labelPedido = new javax.swing.JLabel();
        acaoCadastro = new javax.swing.JPanel();
        toolBar = new javax.swing.JPanel();
        btIncluir = new br.edu.materdei.tas.desktop.gui.core.TasItemToolBar();
        btEditar = new br.edu.materdei.tas.desktop.gui.core.TasItemToolBar();
        tasSeparadorItem1 = new br.edu.materdei.tas.desktop.gui.core.TasSeparadorItem();
        btExcluir = new br.edu.materdei.tas.desktop.gui.core.TasItemToolBar();
        separador = new br.edu.materdei.tas.desktop.gui.core.TasSeparadorItem();
        btAddVenda = new br.edu.materdei.tas.desktop.gui.core.TasItemToolBar();
        divRight = new javax.swing.JPanel();
        labelAcaoMenu = new javax.swing.JLabel();
        container = new javax.swing.JPanel();
        tabTop = new javax.swing.JPanel();
        tabLeft = new javax.swing.JPanel();
        tabRight = new javax.swing.JPanel();
        tabBottom = new javax.swing.JPanel();
        conteudo = new javax.swing.JPanel();
        panelMigalha = new javax.swing.JPanel();
        migalha = new javax.swing.JLabel();
        panelTabela = new javax.swing.JPanel();
        scroll = new javax.swing.JScrollPane();
        grid = new javax.swing.JTable();
        panelLegenda = new javax.swing.JPanel();
        lbEmAberto = new javax.swing.JLabel();
        lbFaturado = new javax.swing.JLabel();

        setBackground(new java.awt.Color(246, 246, 246));
        setLayout(new java.awt.BorderLayout());

        toolbar.setMaximumSize(new java.awt.Dimension(32767, 103));
        toolbar.setMinimumSize(new java.awt.Dimension(0, 103));
        toolbar.setPreferredSize(new java.awt.Dimension(540, 103));
        toolbar.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 10, 4));

        acaoPedido.setMinimumSize(new java.awt.Dimension(155, 99));
        acaoPedido.setOpaque(false);
        acaoPedido.setPreferredSize(new java.awt.Dimension(118, 99));
        acaoPedido.setLayout(new java.awt.BorderLayout());

        tbPedido.setMaximumSize(new java.awt.Dimension(32767, 78));
        tbPedido.setMinimumSize(new java.awt.Dimension(57, 78));
        tbPedido.setOpaque(false);
        tbPedido.setPreferredSize(new java.awt.Dimension(57, 78));
        tbPedido.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 0, 0));

        btPedido.setToolTipText("Pedidos de Venda");
        btPedido.setLabel("Pedidos");
        btPedido.setMaximumSize(new java.awt.Dimension(52, 78));
        btPedido.setMinimumSize(new java.awt.Dimension(52, 78));
        btPedido.setPreferredSize(new java.awt.Dimension(52, 78));
        btPedido.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btPedidoMousePressed(evt);
            }
        });
        tbPedido.add(btPedido);

        javax.swing.GroupLayout tasSeparadorItem2Layout = new javax.swing.GroupLayout(tasSeparadorItem2);
        tasSeparadorItem2.setLayout(tasSeparadorItem2Layout);
        tasSeparadorItem2Layout.setHorizontalGroup(
            tasSeparadorItem2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
        tasSeparadorItem2Layout.setVerticalGroup(
            tasSeparadorItem2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 78, Short.MAX_VALUE)
        );

        tbPedido.add(tasSeparadorItem2);

        btVenda.setToolTipText("Vendas");
        btVenda.setDoubleBuffered(false);
        btVenda.setLabel("Vendas");
        btVenda.setMaximumSize(new java.awt.Dimension(52, 78));
        btVenda.setMinimumSize(new java.awt.Dimension(52, 78));
        btVenda.setPreferredSize(new java.awt.Dimension(52, 78));
        btVenda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btVendaMousePressed(evt);
            }
        });
        tbPedido.add(btVenda);

        acaoPedido.add(tbPedido, java.awt.BorderLayout.CENTER);

        divRight1.setBackground(new java.awt.Color(198, 198, 198));
        divRight1.setPreferredSize(new java.awt.Dimension(1, 100));

        javax.swing.GroupLayout divRight1Layout = new javax.swing.GroupLayout(divRight1);
        divRight1.setLayout(divRight1Layout);
        divRight1Layout.setHorizontalGroup(
            divRight1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1, Short.MAX_VALUE)
        );
        divRight1Layout.setVerticalGroup(
            divRight1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 78, Short.MAX_VALUE)
        );

        acaoPedido.add(divRight1, java.awt.BorderLayout.EAST);

        labelPedido.setFont(new java.awt.Font("Segoe UI Light", 0, 10)); // NOI18N
        labelPedido.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelPedido.setText("Pedidos e Vendas");
        labelPedido.setMaximumSize(new java.awt.Dimension(101, 21));
        labelPedido.setMinimumSize(new java.awt.Dimension(101, 21));
        labelPedido.setPreferredSize(new java.awt.Dimension(101, 21));
        acaoPedido.add(labelPedido, java.awt.BorderLayout.SOUTH);

        toolbar.add(acaoPedido);

        acaoCadastro.setMinimumSize(new java.awt.Dimension(155, 99));
        acaoCadastro.setOpaque(false);
        acaoCadastro.setPreferredSize(new java.awt.Dimension(232, 99));
        acaoCadastro.setLayout(new java.awt.BorderLayout());

        toolBar.setMaximumSize(new java.awt.Dimension(32767, 78));
        toolBar.setMinimumSize(new java.awt.Dimension(57, 78));
        toolBar.setOpaque(false);
        toolBar.setPreferredSize(new java.awt.Dimension(57, 78));
        toolBar.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 0, 0));

        btIncluir.setToolTipText("Novo Produto");
        btIncluir.setLabel("Incluir");
        btIncluir.setMaximumSize(new java.awt.Dimension(52, 78));
        btIncluir.setMinimumSize(new java.awt.Dimension(52, 78));
        btIncluir.setPreferredSize(new java.awt.Dimension(52, 78));
        btIncluir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btIncluirMousePressed(evt);
            }
        });
        toolBar.add(btIncluir);

        btEditar.setToolTipText("Editar Produto");
        btEditar.setLabel("Editar");
        btEditar.setMaximumSize(new java.awt.Dimension(52, 78));
        btEditar.setMinimumSize(new java.awt.Dimension(52, 78));
        btEditar.setPreferredSize(new java.awt.Dimension(52, 78));
        btEditar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btEditarMousePressed(evt);
            }
        });
        toolBar.add(btEditar);

        javax.swing.GroupLayout tasSeparadorItem1Layout = new javax.swing.GroupLayout(tasSeparadorItem1);
        tasSeparadorItem1.setLayout(tasSeparadorItem1Layout);
        tasSeparadorItem1Layout.setHorizontalGroup(
            tasSeparadorItem1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
        tasSeparadorItem1Layout.setVerticalGroup(
            tasSeparadorItem1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 78, Short.MAX_VALUE)
        );

        toolBar.add(tasSeparadorItem1);

        btExcluir.setToolTipText("Excluir Produto");
        btExcluir.setDoubleBuffered(false);
        btExcluir.setLabel("Excluir");
        btExcluir.setMaximumSize(new java.awt.Dimension(52, 78));
        btExcluir.setMinimumSize(new java.awt.Dimension(52, 78));
        btExcluir.setPreferredSize(new java.awt.Dimension(52, 78));
        btExcluir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btExcluirMousePressed(evt);
            }
        });
        toolBar.add(btExcluir);

        javax.swing.GroupLayout separadorLayout = new javax.swing.GroupLayout(separador);
        separador.setLayout(separadorLayout);
        separadorLayout.setHorizontalGroup(
            separadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
        separadorLayout.setVerticalGroup(
            separadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 78, Short.MAX_VALUE)
        );

        toolBar.add(separador);

        btAddVenda.setToolTipText("Gerar venda à partir do pedido");
        btAddVenda.setDoubleBuffered(false);
        btAddVenda.setLabel("Vender");
        btAddVenda.setMaximumSize(new java.awt.Dimension(52, 78));
        btAddVenda.setMinimumSize(new java.awt.Dimension(52, 78));
        btAddVenda.setPreferredSize(new java.awt.Dimension(52, 78));
        btAddVenda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btAddVendaMousePressed(evt);
            }
        });
        toolBar.add(btAddVenda);
        btAddVenda.getAccessibleContext().setAccessibleDescription("Transformar Pedido em Venda");

        acaoCadastro.add(toolBar, java.awt.BorderLayout.CENTER);

        divRight.setBackground(new java.awt.Color(198, 198, 198));
        divRight.setPreferredSize(new java.awt.Dimension(1, 100));

        javax.swing.GroupLayout divRightLayout = new javax.swing.GroupLayout(divRight);
        divRight.setLayout(divRightLayout);
        divRightLayout.setHorizontalGroup(
            divRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1, Short.MAX_VALUE)
        );
        divRightLayout.setVerticalGroup(
            divRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 78, Short.MAX_VALUE)
        );

        acaoCadastro.add(divRight, java.awt.BorderLayout.EAST);

        labelAcaoMenu.setFont(new java.awt.Font("Segoe UI Light", 0, 10)); // NOI18N
        labelAcaoMenu.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelAcaoMenu.setText("Ações de Cadastros");
        labelAcaoMenu.setMaximumSize(new java.awt.Dimension(101, 21));
        labelAcaoMenu.setMinimumSize(new java.awt.Dimension(101, 21));
        labelAcaoMenu.setPreferredSize(new java.awt.Dimension(101, 21));
        acaoCadastro.add(labelAcaoMenu, java.awt.BorderLayout.SOUTH);

        toolbar.add(acaoCadastro);

        add(toolbar, java.awt.BorderLayout.NORTH);

        container.setBackground(new java.awt.Color(246, 246, 246));
        container.setLayout(new java.awt.BorderLayout());

        tabTop.setOpaque(false);
        tabTop.setPreferredSize(new java.awt.Dimension(0, 5));

        javax.swing.GroupLayout tabTopLayout = new javax.swing.GroupLayout(tabTop);
        tabTop.setLayout(tabTopLayout);
        tabTopLayout.setHorizontalGroup(
            tabTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 540, Short.MAX_VALUE)
        );
        tabTopLayout.setVerticalGroup(
            tabTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );

        container.add(tabTop, java.awt.BorderLayout.NORTH);

        tabLeft.setOpaque(false);
        tabLeft.setPreferredSize(new java.awt.Dimension(5, 0));

        javax.swing.GroupLayout tabLeftLayout = new javax.swing.GroupLayout(tabLeft);
        tabLeft.setLayout(tabLeftLayout);
        tabLeftLayout.setHorizontalGroup(
            tabLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );
        tabLeftLayout.setVerticalGroup(
            tabLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 310, Short.MAX_VALUE)
        );

        container.add(tabLeft, java.awt.BorderLayout.WEST);

        tabRight.setOpaque(false);
        tabRight.setPreferredSize(new java.awt.Dimension(5, 0));

        javax.swing.GroupLayout tabRightLayout = new javax.swing.GroupLayout(tabRight);
        tabRight.setLayout(tabRightLayout);
        tabRightLayout.setHorizontalGroup(
            tabRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );
        tabRightLayout.setVerticalGroup(
            tabRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 310, Short.MAX_VALUE)
        );

        container.add(tabRight, java.awt.BorderLayout.EAST);

        tabBottom.setOpaque(false);
        tabBottom.setPreferredSize(new java.awt.Dimension(0, 5));

        javax.swing.GroupLayout tabBottomLayout = new javax.swing.GroupLayout(tabBottom);
        tabBottom.setLayout(tabBottomLayout);
        tabBottomLayout.setHorizontalGroup(
            tabBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 540, Short.MAX_VALUE)
        );
        tabBottomLayout.setVerticalGroup(
            tabBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );

        container.add(tabBottom, java.awt.BorderLayout.SOUTH);

        conteudo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(210, 215, 222)));
        conteudo.setOpaque(false);
        conteudo.setLayout(new java.awt.BorderLayout());

        panelMigalha.setBackground(new java.awt.Color(252, 252, 252));
        panelMigalha.setPreferredSize(new java.awt.Dimension(388, 28));
        panelMigalha.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING));

        migalha.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        migalha.setText("Cadastro de Produtos");
        panelMigalha.add(migalha);

        conteudo.add(panelMigalha, java.awt.BorderLayout.NORTH);

        panelTabela.setOpaque(false);

        scroll.setBackground(new java.awt.Color(246, 246, 246));

        grid.setFont(new java.awt.Font("Segoe UI Light", 0, 12)); // NOI18N
        grid.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        grid.setGridColor(new java.awt.Color(240, 240, 240));
        grid.setRowHeight(22);
        grid.setSelectionBackground(new java.awt.Color(50, 153, 255));
        grid.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        grid.getTableHeader().setResizingAllowed(false);
        scroll.setViewportView(grid);

        javax.swing.GroupLayout panelTabelaLayout = new javax.swing.GroupLayout(panelTabela);
        panelTabela.setLayout(panelTabelaLayout);
        panelTabelaLayout.setHorizontalGroup(
            panelTabelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTabelaLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 518, Short.MAX_VALUE)
                .addGap(5, 5, 5))
        );
        panelTabelaLayout.setVerticalGroup(
            panelTabelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTabelaLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                .addGap(5, 5, 5))
        );

        conteudo.add(panelTabela, java.awt.BorderLayout.CENTER);

        panelLegenda.setBorder(javax.swing.BorderFactory.createTitledBorder("Legenda"));
        panelLegenda.setOpaque(false);
        panelLegenda.setPreferredSize(new java.awt.Dimension(528, 45));
        panelLegenda.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));

        lbEmAberto.setText("Em Aberto");
        lbEmAberto.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lbEmAberto.setMaximumSize(new java.awt.Dimension(80, 80));
        lbEmAberto.setPreferredSize(new java.awt.Dimension(100, 20));
        panelLegenda.add(lbEmAberto);

        lbFaturado.setText("Faturado");
        lbFaturado.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lbFaturado.setMaximumSize(new java.awt.Dimension(80, 80));
        lbFaturado.setPreferredSize(new java.awt.Dimension(100, 20));
        panelLegenda.add(lbFaturado);

        conteudo.add(panelLegenda, java.awt.BorderLayout.SOUTH);

        container.add(conteudo, java.awt.BorderLayout.CENTER);

        add(container, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btIncluirMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btIncluirMousePressed
        TasItemToolBar item = (TasItemToolBar) evt.getComponent();
        if (item.isEnabled()) {
            this.incluir();
        }
    }//GEN-LAST:event_btIncluirMousePressed

    private void btEditarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btEditarMousePressed
        TasItemToolBar item = (TasItemToolBar) evt.getComponent();
        if (item.isEnabled()) {
            this.editar();
        }
    }//GEN-LAST:event_btEditarMousePressed

    private void btExcluirMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btExcluirMousePressed
        TasItemToolBar item = (TasItemToolBar) evt.getComponent();
        if (item.isEnabled()) {
            this.excluir();
        }
    }//GEN-LAST:event_btExcluirMousePressed

    private void btPedidoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btPedidoMousePressed
        TasItemToolBar item = (TasItemToolBar) evt.getComponent();
        if (item.isEnabled()) {
            this.preparaPedido();
        }
    }//GEN-LAST:event_btPedidoMousePressed

    private void btVendaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btVendaMousePressed
        TasItemToolBar item = (TasItemToolBar) evt.getComponent();
        if (item.isEnabled()) {
            this.preparaVenda();
        }
    }//GEN-LAST:event_btVendaMousePressed

    private void btAddVendaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btAddVendaMousePressed
        TasItemToolBar item = (TasItemToolBar) evt.getComponent();
        if (item.isEnabled()) {
            this.geraVenda();
        }
    }//GEN-LAST:event_btAddVendaMousePressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel acaoCadastro;
    private javax.swing.JPanel acaoPedido;
    private br.edu.materdei.tas.desktop.gui.core.TasItemToolBar btAddVenda;
    private br.edu.materdei.tas.desktop.gui.core.TasItemToolBar btEditar;
    private br.edu.materdei.tas.desktop.gui.core.TasItemToolBar btExcluir;
    private br.edu.materdei.tas.desktop.gui.core.TasItemToolBar btIncluir;
    private br.edu.materdei.tas.desktop.gui.core.TasItemToolBar btPedido;
    private br.edu.materdei.tas.desktop.gui.core.TasItemToolBar btVenda;
    private javax.swing.JPanel container;
    private javax.swing.JPanel conteudo;
    private javax.swing.JPanel divRight;
    private javax.swing.JPanel divRight1;
    private javax.swing.JTable grid;
    private javax.swing.JLabel labelAcaoMenu;
    private javax.swing.JLabel labelPedido;
    private javax.swing.JLabel lbEmAberto;
    private javax.swing.JLabel lbFaturado;
    private javax.swing.JLabel migalha;
    private javax.swing.JPanel panelLegenda;
    private javax.swing.JPanel panelMigalha;
    private javax.swing.JPanel panelTabela;
    private javax.swing.JScrollPane scroll;
    private br.edu.materdei.tas.desktop.gui.core.TasSeparadorItem separador;
    private javax.swing.JPanel tabBottom;
    private javax.swing.JPanel tabLeft;
    private javax.swing.JPanel tabRight;
    private javax.swing.JPanel tabTop;
    private br.edu.materdei.tas.desktop.gui.core.TasSeparadorItem tasSeparadorItem1;
    private br.edu.materdei.tas.desktop.gui.core.TasSeparadorItem tasSeparadorItem2;
    private javax.swing.JPanel tbPedido;
    private javax.swing.JPanel toolBar;
    private br.edu.materdei.tas.desktop.gui.core.TasImagePanel toolbar;
    // End of variables declaration//GEN-END:variables

    @Override
    public void preinit() {
        preparaPedido();
    }
    private void preparaPedido() {
        this.showPedido = true;
        
        //ToolBar
        acaoCadastro.setPreferredSize(new java.awt.Dimension(232, 99));
        btPedido.setSelected(true);
        btVenda.setSelected(false);        
        btIncluir.setVisible(true);
        btIncluir.setToolTipText("Novo Pedido");
        
        btEditar.setLabel("Editar");
        btEditar.setIcon(new ImageIcon(getClass().getResource("/assets/toolbar/editar.png")));
        btEditar.setToolTipText("Editar Pedido");
        btEditar.setEnabled(false);
        
        btExcluir.setToolTipText("Excluir Pedido");
        btExcluir.setEnabled(false);
        labelAcaoMenu.setText("Ações de Cadastros Pedidos");
        
        separador.setVisible(true);
        btAddVenda.setVisible(true);
        btAddVenda.setEnabled(false);
        
        //Migalha
        migalha.setText("Cadastro de Pedido de Venda");
        
        //Tabela
        constroiTabelaPedido();
        
        //Carrega dados
        loadDados();
        
        //Carrega dados no grid
        carregaGridPedido();
        
        //Legenda
        panelLegenda.setVisible(true);
    }
    private void preparaVenda() {
        this.showPedido = false;
        
        //ToolBar
        acaoCadastro.setPreferredSize(new java.awt.Dimension(118, 99));
        btPedido.setSelected(false);
        btVenda.setSelected(true);
        btIncluir.setVisible(false);
        
        btEditar.setLabel("Visualizar");
        btEditar.setIcon(new ImageIcon(getClass().getResource("/assets/toolbar/visualizar.png")));
        btEditar.setToolTipText("Visualizar Detalhes da Venda");
        btEditar.setEnabled(false);
        
        btExcluir.setToolTipText("Excluir Venda");
        btExcluir.setEnabled(false);
        labelAcaoMenu.setText("Ações de Vendas");
        
        separador.setVisible(false);
        btAddVenda.setVisible(false);
        
        //Migalha
        migalha.setText("Vendas");
        
        //Tabela
        constroiTabelaVenda();
        
        //Carrega Dados
        carregaGridVenda();
        
        //Legenda
        panelLegenda.setVisible(false);
    }
    
    private void constroiTabelaPedido() {
        //Monta tabela
        grid.setAutoResizeMode(JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS);
        DefaultTableModel modelo = (DefaultTableModel) grid.getModel();
        modelo.setColumnCount(0);
        
        //Define o título das colunas
        modelo.addColumn("");
        modelo.addColumn("Código");
        modelo.addColumn("Data");
        modelo.addColumn("Faturado");
        modelo.addColumn("Cliente");
        modelo.addColumn("Total (R$)");
        
        //Define largura das colunas
        grid.getColumnModel().getColumn(0).setPreferredWidth(30);
        grid.getColumnModel().getColumn(1).setPreferredWidth(100);
        grid.getColumnModel().getColumn(2).setPreferredWidth(150);
        grid.getColumnModel().getColumn(3).setPreferredWidth(150);
        grid.getColumnModel().getColumn(4).setPreferredWidth(450);
        grid.getColumnModel().getColumn(5).setPreferredWidth(300);
        
        //Adiciona ícone do certificado digital na primeira coluna
        TableColumnModel columnModel = grid.getColumnModel();
        AtivoTableCellRenderer renderer = new AtivoTableCellRenderer();        
        columnModel.getColumn(0).setCellRenderer(renderer);
        
        mainframe.setStatus("Pronto!");        
    }
    private void constroiTabelaVenda() {
        loadDados();
        
        //Monta tabela
        grid.setAutoResizeMode(JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS);
        DefaultTableModel modelo = (DefaultTableModel) grid.getModel();
        modelo.setColumnCount(0);
        
        //Define o título das colunas
        modelo.addColumn("Código");
        modelo.addColumn("Data");
        modelo.addColumn("Pedido");
        modelo.addColumn("Cliente");
        modelo.addColumn("Total (R$)");
        
        //Define largura das colunas
        grid.getColumnModel().getColumn(0).setPreferredWidth(100);
        grid.getColumnModel().getColumn(1).setPreferredWidth(150);
        grid.getColumnModel().getColumn(2).setPreferredWidth(100);
        grid.getColumnModel().getColumn(3).setPreferredWidth(450);
        grid.getColumnModel().getColumn(4).setPreferredWidth(300);
        
        mainframe.setStatus("Pronto!");
    }
    
    public void loadDados() {
        this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
        try {
            mainframe.setStatus("Carregando dados. Aguarde...");
            
            try {
                if (showPedido) {
                    this.pedidos = BackendService.findAll("pedidos");
                            
                } else {
                    this.vendas = BackendService.findAll("vendas");
                }

                mainframe.setStatus("Pronto!");   
            } catch (Exception e) {
                TasDialogError dlgError = new TasDialogError(mainframe);
                dlgError.showError(TasDialogError.DANGER_ERROR, 
                                   "<html>Não foi possível carregar os registros. Clique em \"Detalhes\" Para visualizar o problema.</html>", 
                                   e.getMessage());
                this.mainframe.setStatus(new ImageIcon(getClass().getResource("/assets/system/icons/icon-warning-small.png")), 
                                         e.getMessage(), "Ops!");
            }
        } finally {
            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }
    }
    private Double getTotal(JSONObject pedido) {
        Double total = 0.0;
        
        JSONArray itens = (JSONArray) pedido.getJSONArray("itens");
        
        for (Object object : itens.toArray()) {
            JSONObject item = (JSONObject) object;
            
            total += (item.getDouble("vlrunit") * item.getDouble("qtdade"));
        }
        
        return total;
    }
    private void carregaGridPedido() {
        DefaultTableModel modelo = (DefaultTableModel) grid.getModel();
        
        mainframe.setStatus("Carregando dados no grid. Aguarde...");
        
        //Alimenta a tabela
        try {
            modelo.setNumRows(0);
            
            for (Object dado : this.pedidos) {
                JSONObject pedido = (JSONObject) dado;

                Boolean emaberto = pedido.get("dtfaturado") instanceof JSONNull;
                SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                Date dtpedido = new SimpleDateFormat("yyyy-MM-dd").parse(pedido.getString("dtpedido"));
                String dtlibera = emaberto ? "" : df.format(dtpedido);

                NumberFormat nf = NumberFormat.getCurrencyInstance();
                String total = nf.format(getTotal(pedido));
                
                JSONObject cliente = (JSONObject) pedido.get("cliente");

                modelo.addRow(new Object[] {emaberto, pedido.get("codigo"), df.format(dtpedido),
                                            dtlibera, cliente.get("nome"), total});            
            }
            grid.setModel(modelo);
            
        } catch (ParseException ex) {
            TasDialogError dlgError = new TasDialogError(mainframe);
            dlgError.showError(TasDialogError.DANGER_ERROR, 
                    "<html>Não foi possível formatar a Data do Pedido. Clique em \"Detalhes\" Para visualizar o problema.</html>", 
                    ex.getMessage());
            
            this.mainframe.setStatus(new ImageIcon(getClass().getResource("/assets/system/icons/icon-warning-small.png")), 
                    ex.getMessage(), "Ops!");
        }        
        mainframe.setStatus("Pronto!");
    }
    private void carregaGridVenda() {
        DefaultTableModel modelo = (DefaultTableModel) grid.getModel();
        
        mainframe.setStatus("Carregando dados no grid. Aguarde...");
        
        //Alimenta a tabela
        try {        
            modelo.setNumRows(0);
            
            for (Object dado : this.vendas) {
                JSONObject venda = (JSONObject) dado;

                SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                Date dtvenda = new SimpleDateFormat("yyyy-MM-dd").parse(venda.getString("dtvenda"));
                
                JSONObject pedido = (JSONObject) venda.get("pedido");
                
                NumberFormat nf = NumberFormat.getCurrencyInstance();
                String total = nf.format(getTotal(pedido));
                
                JSONObject cliente = (JSONObject) pedido.get("cliente");

                modelo.addRow(new Object[] {venda.get("codigo"), df.format(dtvenda), pedido.get("codigo"),
                                            cliente.get("nome"), total}); 
            }
            grid.setModel(modelo);
            
        } catch (ParseException ex) {
            TasDialogError dlgError = new TasDialogError(mainframe);
            dlgError.showError(TasDialogError.DANGER_ERROR, 
                    "<html>Não foi possível formatar a Data do Pedido. Clique em \"Detalhes\" Para visualizar o problema.</html>", 
                    ex.getMessage());
            
            this.mainframe.setStatus(new ImageIcon(getClass().getResource("/assets/system/icons/icon-warning-small.png")), 
                    ex.getMessage(), "Ops!");
        }
        
        mainframe.setStatus("Pronto!");
    }
    
    private void showDialogPedido(JSONObject pedido) {
        PedidoVendaDialog dialog = new PedidoVendaDialog(mainframe, pedido, false);
        showDialog(dialog);
        
        if (!dialog.fail) {
            loadDados();
            carregaGridPedido();
        }        
    }
    private void showDialogVenda(JSONObject venda) {
        JSONObject pedido = (JSONObject) venda.get("pedido");
        
        PedidoVendaDialog dialog = new PedidoVendaDialog(mainframe, pedido, true);
        showDialog(dialog);
        
        if (!dialog.fail) {
            loadDados();
            carregaGridVenda();
        }
    }
    private void showDialog(GenericDialogImpl dialog) {
        getRootPane().getGlassPane().setVisible(true);
        
        dialog.dispose();
        dialog.setLocationRelativeTo(this);
        dialog.setUndecorated(true);
        dialog.setVisible(true);
        
        getRootPane().getGlassPane().setVisible(false);
    }
    
    //TOOLBAR
    private void incluir() {
        
        JSONObject novo = new JSONObject();
        novo.put("codigo", "");  
        
        if (showPedido) {
            novo.put("dtcompra", "");
            novo.put("cliente", null);
            novo.put("itens", null);
            
            showDialogPedido(novo);
        } else {
            novo.put("pedido", null);
            showDialogVenda(novo);
        }
    }
    private void editar() {
        
        if (showPedido) {
            JSONObject pedido = (JSONObject) this.pedidos[grid.getSelectedRow()];
            showDialogPedido(pedido);
        } else {
            JSONObject venda = (JSONObject) this.vendas[grid.getSelectedRow()];
            showDialogVenda(venda);
        }
    }
    private void excluir() {
        Object[] options = { "Sim", "Não" };
        
        int opcao = JOptionPane.showOptionDialog(this, "Deseja excluir o registro selecionado?", 
                                                 "Excluir registro", JOptionPane.YES_NO_OPTION, 
                                                 JOptionPane.QUESTION_MESSAGE, null,  
                                                 options, options[0]);
        if (opcao == JOptionPane.YES_OPTION) {
            setCursor(new Cursor(Cursor.WAIT_CURSOR));
            try {
                mainframe.setStatus("Excluindo registro. Aguarde...");
                try {
                    if (showPedido) {
                        JSONObject pedido = (JSONObject) this.pedidos[grid.getSelectedRow()];
                        BackendService.deleteById("pedidos/"+ pedido.get("id"));
                        loadDados();
                        carregaGridPedido();
                        
                    } else {
                        JSONObject venda = (JSONObject) this.vendas[grid.getSelectedRow()];
                        BackendService.deleteById("vendas/"+ venda.get("id"));
                        loadDados();
                        carregaGridVenda();
                    }
                    
                } catch (Exception e) {
                    TasDialogError dlgError = new TasDialogError(mainframe);
                    dlgError.showError(TasDialogError.DANGER_ERROR, 
                                       "<html>Não foi possível excluir o registro. Clique em \"Detalhes\" Para visualizar o problema.</html>", 
                                       e.getMessage());
                    this.mainframe.setStatus(new ImageIcon(getClass().getResource("/assets/system/icons/icon-warning-small.png")), 
                                             e.getMessage(), "Ops!");
                }                
            } finally {
                setCursor(new Cursor(Cursor.DEFAULT_CURSOR));    
            }
        }
    }    

    private void geraVenda() {
        Object[] options = { "Sim", "Não" };
        
        int opcao = JOptionPane.showOptionDialog(this, "Deseja gerar uma venda à partir do pedido selecionado?", 
                                                 "Gerar venda", JOptionPane.YES_NO_OPTION, 
                                                 JOptionPane.QUESTION_MESSAGE, null,  
                                                 options, options[0]); 
        if (opcao == JOptionPane.YES_OPTION) {
            JSONObject pedido = (JSONObject) this.pedidos[grid.getSelectedRow()];
            JSONObject venda = new JSONObject();
            venda.put("pedido", pedido);

            try {
                BackendService.save("vendas", venda);

                loadDados();
                carregaGridPedido();
            } catch (Exception e) {
                TasDialogError dlgError = new TasDialogError(mainframe);
                dlgError.showError(TasDialogError.DANGER_ERROR, 
                                   "<html>Não foi possível gerar a venda. Clique em \"Detalhes\" Para visualizar o problema.</html>", 
                                   e.getMessage());
                this.mainframe.setStatus(new ImageIcon(getClass().getResource("/assets/system/icons/icon-warning-small.png")), 
                                         e.getMessage(), "Ops!");
            }
        }
    }
}
